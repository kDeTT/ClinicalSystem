#BlueJ class context
comment0.params=data
comment0.target=Agenda(java.util.Date)
comment1.params=
comment1.target=java.util.Date\ getData()
comment10.params=servico
comment10.target=boolean\ cancelServico(Servico)
comment10.text=\r\n\ Cancela\ um\ servi\u00E7o\ e\ mostra\ na\ tela\ qual\ servi\u00E7o\ foi\ cancelado\r\n\r\n\ @param\ \ Servico\ servico\r\n\ @return\ \ \ \ \ the\ sum\ of\ x\ and\ y\r\n
comment11.params=paciente
comment11.target=java.util.ArrayList\ findServicoListByPaciente(Paciente)
comment11.text=\r\n\ Procura\ na\ lista\ de\ servi\u00E7os\ da\ agenda\ se\ o\ paciente\r\n\r\n\ @param\ \ Paciente\ paciente\ \ \ \ paciente\ a\ ser\ encontrado\ na\ agenda\r\n\ @return\ \ ArraList<Servico>\ \ \ Servicos\ em\ que\ o\ paciente\ est\u00E1\ agendado\r\n
comment12.params=inicio\ fim
comment12.target=boolean\ isComercialTime(java.util.Date,\ java.util.Date)
comment12.text=\r\n\ Checa\ se\ o\ intevalo\ [inicio\ ->\ fim]\ dado\ se\ encontra\ dentro\ do\ hor\u00E1rio\ comercial\r\n\r\n\ @param\ \ Date\ inicio\ in\u00EDcio\ do\ intervalo\r\n\ @param\ \ Date\ fim\ \ \ \ fim\ do\ intervalo\r\n\ \r\n\ @return\ \ boolean\ \ \r\n
comment13.params=
comment13.target=void\ sort()
comment13.text=\r\n\ Ordena\ a\ lista\ de\ servi\u00E7os\ da\ agenda\ pela\ data\r\n\r\n
comment2.params=
comment2.target=java.util.ArrayList\ getServicoList()
comment3.params=servico
comment3.target=boolean\ addServico(Servico)
comment3.text=\r\n\ M\u00E9todo\ que\ adiciona\ o\ servi\u00E7o\ na\ agenda,\ fazendo\ o\ tratamento\ de\ todas\ as\ colis\u00F5es\r\n\r\n\ @param\ \ Servico\ servico\ servi\u00E7o\ a\ ser\ adicionado\r\n\ \r\n\ @return\ \ boolean\ \ \ \ \ \ \ \ true\ se\ o\ servi\u00E7o\ foi\ adicionado\ e\ false\ caso\ contr\u00E1rio\r\n\ \r\n\ @throws\ OutdatedException()\ \ Quando\ o\ servi\u00E7o\ a\ ser\ adicionado\ \u00E9\ anterior\ a\ data\ atual\r\n\ @throws\ OutOfBusinessException()\ \ Quando\ o\ servi\u00E7o\ a\ ser\ adicionado\ est\u00E1\ fora\ do\ hor\u00E1rio\ comercial\r\n\ @throws\ NoWindowException()\ \ Quando\ o\ servi\u00E7o\ precisa\ realocar\ outros\ e\ n\u00E3o\ h\u00E1\ vagas\ no\ hor\u00E1rio\r\n
comment4.params=servico
comment4.target=boolean\ delayServicos(Servico)
comment4.text=\r\n\ O\ metodo\ recebe\ o\ servico\ que\ precisa\ ser\ encaixado\ na\ agenda\ e\ abre\ espa\u00E7o\ para\ este\ servi\u00E7o\r\n\r\n\ @param\ \ servico\ Servico\ servi\u00E7o\ que\ precisa\ ser\ encaixado\ na\ agenda\r\n\ \r\n\ @return\ boolean\ \ \ \ \ \ \ \ \ true\ se\ foi\ poss\u00EDvel\ abrir\ espa\u00E7o\ para\ o\ servi\u00E7o\ e\ false\ caso\ contr\u00E1rio\r\n\ \r\n\ @throws\ PriorityException()\ Quando\ o\ hor\u00E1rio\ a\ ser\ realocado\ \u00E9\ tab\u00E9m\ de\ um\ idoso,\ idosos\ n\u00E3o\ possuem\ vantagem\ sobre\ idosos\r\n
comment5.params=servico
comment5.target=void\ reallocate(Servico)
comment5.text=\r\n\ Dado\ um\ servi\u00E7o\ que\ precisa\ ser\ realocado,\ procura-se\ uma\ janela\ para\ este,\ se\ encontrado\ o\ servi\u00E7o\ \u00E9\ realocado,\ caso\ contr\u00E1rio\ ele\ \u00E9\ cancelado.\r\n\r\n\ @param\ \ Servico\ servico\ servi\u00E7o\ a\ ser\ realocado\r\n
comment6.params=duracao
comment6.target=java.util.Date\ findWindow(int)
comment6.text=\r\n\ Dada\ uma\ dura\u00E7\u00E3o\ de\ um\ servi\u00E7o\ procura-se\ uma\ "janela"\ aonde\ ser\u00E1\ encaixado\ o\ servi\u00E7o,\ precorrendo\ desde\ o\ come\u00E7o\ do\ expediente\ ao\ final\r\n\r\n\ @param\ int\ \ duracao\ \ \ dura\u00E7\u00E3o\ do\ servi\u00E7o\ a\ ser\ encaixado\r\n\ \r\n\ @return\ \ \ Date\ window\ \ janela\ no\ hor\u00E1rio\ aonde\ caber\u00E1\ o\ servi\u00E7o\r\n
comment7.params=inicio\ fim\ duracao
comment7.target=java.util.Date\ findWindow(java.util.Date,\ java.util.Date,\ int)
comment7.text=\r\n\ \ Dada\ uma\ dura\u00E7\u00E3o\ de\ um\ servi\u00E7o\ e\ um\ intervalo\ de\ tempo\ procura-se\ uma\ "janela"\ \r\n\ \ aonde\ ser\u00E1\ encaixado\ o\ servi\u00E7o,\ precorrendo\ desde\ o\ come\u00E7o\ do\ expediente\ ao\ final\r\n\r\n\ @param\ int\ duracao\ \ dura\u00E7\u00E3o\ do\ servi\u00E7o\ a\ ser\ encaixado\r\n\ @param\ Date\ inicio\ \ inicio\ do\ intervalo\r\n\ @param\ Date\ fim\ \ \ \ \ fim\ do\ intervalo\r\n\ \r\n\ @return\ \ \ Date\ window\ \ janela\ no\ hor\u00E1rio\ aonde\ caber\u00E1\ o\ servi\u00E7o\r\n
comment8.params=inicio\ fim
comment8.target=java.util.List\ servicosSubList(java.util.Date,\ java.util.Date)
comment8.text=\r\n\ Cria\ uma\ lista\ dos\ servi\u00E7os\ da\ agenda\ entre\ o\ intervalo\ de\ tempo\ dado\r\n\r\n\ @param\ \ Date\ inicio\ inicio\ do\ intervalo\r\n\ @param\ \ Date\ fim\ \ \ \ fim\ do\ intervalo\r\n
comment9.params=servico
comment9.target=boolean\ isConflicted(Servico)
comment9.text=\r\n\ Dado\ um\ servi\u00E7o,\ verifica-se\ se\ este\ causar\u00E1\ conflito\ com\ outros\ servi\u00E7os\r\n\r\n\ @param\ \ Servico\ servico\ servi\u00E7o\ que\ ser\u00E1\ verificado\r\n\ \r\n\ @return\ boolean\ \ \ \ \ \ \ \ \ true\ se\ houver\ algum\ conflito,\ false\ caso\ contr\u00E1rio\r\n
numComments=14
