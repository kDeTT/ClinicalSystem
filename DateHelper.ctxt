#BlueJ class context
comment0.params=date\ time
comment0.target=java.util.Date\ stringToData(java.lang.String,\ java.lang.String)
comment0.text=\r\n\ Transforma\ duas\ Strings\ no\ formato\ "dd/MM/yyyy"\ e\ "HH\:mm"\ em\ um\ objeto\ Date\r\n\r\n\ @param\ \ String\ date\ data\ no\ formato\ "dd/MM/yyyy"\r\n\ @param\ \ String\ time\ hor\u00E1rio\ no\ formato\ "HH\:mm"\r\n\ \r\n\ @return\ Date\ \ \ data\ da\ uni\u00E3o\ das\ Strings\r\n\ \r\n\ @throws\ ParseException()\ Quando\ o\ String\ n\u00E3o\ est\u00E1\ no\ devido\ formato\r\n
comment1.params=data
comment1.target=java.lang.String\ dataToString(java.util.Date)
comment1.text=\r\n\ Transforma\ uma\ data\ em\ uma\ String\ no\ formato\ "dd/MM/yyyy,HH\:mm"\r\n\r\n\ @param\ \ Date\ data\ a\ ser\ formatada\r\n\ \r\n\ @return\ \ String\ data\ no\ formato\ "dd/MM/yyyy,HH\:mm"\r\n
comment10.params=date\ inicio\ range
comment10.target=boolean\ isInRangeBefore(java.util.Date,\ java.util.Date,\ int)
comment10.text=\r\n\ Verifica\ a\ partir\ de\ uma\ data\ se\ a\ outra\ est\u00E1\ anteriormente\ dentro\ do\ alcance\r\n\r\n\ @param\ \ Date\ data\ \ \ data\ a\ ser\ verificada\r\n\ @param\ \ Date\ inicio\ data\ que\ ser\u00E1\ usada\ como\ refer\u00EAncia\r\n\ @param\ \ int\ range\ \ \ alcance\ que\ ser\u00E1\ verificado\r\n\ \r\n\ @return\ \ \ boolean\ se\ a\ data\ est\u00E1\ anteriormente\ dentro\ do\ alcance\r\n
comment11.params=inicio\ fim\ data
comment11.target=boolean\ isBetween(java.util.Date,\ java.util.Date,\ java.util.Date)
comment11.text=\r\n\ Dado\ um\ intervalo,\ \u00E9\ verificado\ se\ a\ data\ est\u00E1\ contida\ dentre\ deste\ intervalo\r\n\r\n\ @param\ Date\ inicio\ inicio\ do\ intervalo\r\n\ @param\ Date\ fim\ \ \ \ fim\ do\ intervalo\r\n\ @param\ Date\ data\ \ \ data\ a\ ser\ verificada\r\n\ \r\n\ @return\ boolean\ \ \ \ se\ a\ data\ esta\ dentro\ do\ intervalo\r\n
comment12.params=d1\ d2
comment12.target=boolean\ equals(java.util.Date,\ java.util.Date)
comment12.text=\r\n\ Verifica\ se\ uma\ data\ \u00E9\ igual\ a\ outra\ ignorando\ os\ milisegundos\ e\ o\ fuso\ hor\u00E1rio\r\n\r\n\ @param\ \ Date\ d1\ primeira\ data\r\n\ @param\ \ Date\ d2\ segunda\ data\r\n\ \r\n\ @return\ \ boolean\ \ \ true\ se\ as\ datas\ forem\ iguais,\ false\ caso\ contr\u00E1rio\r\n
comment2.params=
comment2.target=java.util.Date\ getNow()
comment2.text=\ M\u00E9todo\ que\ retorna\ a\ data\ atual\r\n\ \r\n\ @return\ String\ nowDate;\ \r\n
comment3.params=date
comment3.target=boolean\ compareDate(java.util.Date)
comment3.text=\ M\u00E9todo\ que\ compara\ a\ data\ atual\ com\ a\ data\ do\ par\u00E2metro\r\n\ \r\n\ @param\ date\ Data\ a\ ser\ comparada\ com\ a\ atual\r\n\ \r\n\ @return\ (true)\ se\ a\ data\ atual\ \u00E9\ menor\ que\ a\ data\ comparada\ (false)\ se\ a\ data\ atual\ \u00E9\ maior\ que\ a\ data\ comparada\r\n
comment4.params=date\ seconDate
comment4.target=boolean\ compareDay(java.util.Date,\ java.util.Date)
comment4.text=\ M\u00E9todo\ que\ compara\ o\ dia\ de\ duas\ datas\r\n\ \r\n\ @param\ date\ Date\ a\ ser\ comparada\ com\ seconDate\r\n\ @param\ seconDate\ Date\ a\ ser\ comparada\ com\ date\r\n\ \r\n\ @return\ (true)\ se\ a\ 1\u00AA\ data\ \u00E9\ igual\ que\ a\ 2\u00AA\ data\ comparada\ (false)\ se\ a\ 1\u00AA\ data\ \u00E9\ diferente\ que\ a\ 2\u00AA\ data\ comparada\r\n
comment5.params=date\ minutes
comment5.target=java.util.Date\ addMinutes(java.util.Date,\ int)
comment5.text=\ M\u00E9todo\ que\ adiciona\ minutos\ \u00E0\ data\ passada\ como\ par\u00E2metro\r\n\ \r\n\ @param\ date\ Data\ em\ que\ ser\u00E1\ adicionado\ minutos\r\n\ @param\ minutes\ Quantidade\ de\ minutos\ que\ ser\u00E1\ adicionado\ \u00E0\ data\r\n\ \r\n\ @return\ Date\ newDate\ \r\n
comment6.params=date
comment6.target=java.lang.String\ getDate(java.util.Date)
comment7.params=date
comment7.target=java.lang.String\ getTime(java.util.Date)
comment8.params=begin\ end\ minutes
comment8.target=boolean\ timeFits(java.util.Date,\ java.util.Date,\ int)
comment8.text=\r\n\ Recebe\ um\ intervalo\ de\ datas\ e\ verifica\ se\ entre\ estas\ cabe\ uma\ dada\ quantidade\ inteira\ de\ minutos\ \r\n\r\n\ @param\ \ Date\ begin\ \ in\u00EDcio\ do\ intervalo\r\n\ @param\ \ Date\ end\ \ \ \ fim\ do\ intervalo\r\n\ @param\ \ int\ minutes\ tempo\ a\ ser\ verificado,\ em\ minutos\r\n\ \r\n\ @return\ \ boolean\ true\ se\ houver\ espa\u00E7o,\ false\ caso\ contr\u00E1rio.\r\n\ \r\n
comment9.params=date
comment9.target=java.util.Date[]\ comercialTime(java.util.Date)
comment9.text=\r\n\ Dado\ um\ certo\ dia\ retorna\ um\ vetor\ de\ tamanho\ 4\ com\ a\ dupla\ de\ intervalos\ do\ hor\u00E1rio\ comercial\ do\ mesmo\ dia\r\n\r\n\ @param\ \ Date\ date\ dia\ em\ que\ se\ cria\ o\ vetor\r\n\ \r\n\ @return\ \ Date[]\ \ \ vetor\ com\ os\ intervalos\r\n
numComments=13
